openapi: 3.0.1
info:
  title: Todo Backend
  description: 'A simple Spring Boot REST API that lets a client persist the elements of a todo list.'
  contact:
    email: erikproeis@gmail.com
  version: 0.0.1
servers:
  - url: http://127.0.0.1:5000/api
tags:
  - name: Todo
    description: Everything about your todos
paths:
  /todo:
    post:
      tags:
        - Todo
      summary: Create a todo
      operationId: createTodo
      parameters:
        - name: X-Correlation-Id
          in: header
          schema:
            type: string
            format: uuid
            example: "b33b1e32-77ad-42ff-8642-7e41a31ab3d7"
      requestBody:
        description: Todo element object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        200:
          description: OK. Returns the created todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        400:
          description: A todo with the provided combination of text and category already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    get:
      tags:
        - Todo
      summary: Get all todos (filter by category optional)
      operationId: getAllTodos
      parameters:
        - name: X-Correlation-Id
          in: header
          schema:
            type: string
            format: uuid
            example: "b33b1e32-77ad-42ff-8642-7e41a31ab3d7"
        - name: category
          in: query
          schema:
            type: string
            example: "House chores"
      responses:
        200:
          description: OK. Returns the list of existing todos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
        204:
          description: No content
          content: {}
  /todo/{id}:
    put:
      tags:
        - Todo
      summary: Replace todo by id
      description: Replace todo by id, or create it if it does not exist
      operationId: replaceTodo
      parameters:
        - name: X-Correlation-Id
          in: header
          schema:
            type: string
            format: uuid
            example: "b33b1e32-77ad-42ff-8642-7e41a31ab3d7"
        - name: id
          in: path
          schema:
            type: integer
            format: int32
          required: true
      requestBody:
        description: Todo element object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        200:
          description: OK. Returns the created todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        400:
          description: Bad Request. When information is malformed or missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
        - Todo
      summary: Delete todo by id
      description: Delete todo by id
      operationId: deleteTodo
      parameters:
        - name: X-Correlation-Id
          in: header
          schema:
            type: string
            format: uuid
            example: "b33b1e32-77ad-42ff-8642-7e41a31ab3d7"
        - name: id
          in: path
          schema:
            type: integer
            format: int32
          required: true
      responses:
        200:
          description: OK
          content: {}
        404:
          description: Not found. The todo element with the given id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier of a todo element
          nullable: true
        text:
          type: string
          example: Create a todo app
          description: A single thing the user wants to get done
          nullable: false
        category:
          type: string
          example: Life goals
          description: A todo category which helps the user group related todos
          nullable: false
    TodoList:
      type: array
      items:
        $ref: '#/components/schemas/Todo'
      uniqueItems: true
    ApiError:
      type: object
      properties:
        status:
          type: string
          example: 404 Not found
          description: HTTP status code and its "reason phrase"
          nullable: false
        correlationId:
          type: string
          format: uuid
          example: "b33b1e32-77ad-42ff-8642-7e41a31ab3d7"
          description: A string uniquely identifying a transaction/event chain
          nullable: false
        message:
          type: string
          example: "Could not delete todo with id=1 as it does not exist."
          description: A user friendly error message.
          nullable: false
        timestamp:
          type: string
          format: date-time
          example: "2020-01-24T20:42:54.563420Z"
          description: Timestamp showing the time at which the error occurred in ISO 8601 format
          nullable: false
